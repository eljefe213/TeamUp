{"ast":null,"code":"import { getOrigin, checkTargetForNewValues } from '../utils/setters.mjs';\nimport { parseDomVariant } from './utils/parse-dom-variant.mjs';\nimport { VisualElement } from '../VisualElement.mjs';\nclass DOMVisualElement extends VisualElement {\n  sortInstanceNodePosition(a, b) {\n    /**\n     * compareDocumentPosition returns a bitmask, by using the bitwise &\n     * we're returning true if 2 in that bitmask is set to true. 2 is set\n     * to true if b preceeds a.\n     */\n    return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n  }\n  getBaseTargetFromProps(props, key) {\n    var _a;\n    return (_a = props.style) === null || _a === void 0 ? void 0 : _a[key];\n  }\n  removeValueFromRenderState(key, _ref) {\n    let {\n      vars,\n      style\n    } = _ref;\n    delete vars[key];\n    delete style[key];\n  }\n  makeTargetAnimatableFromInstance(_ref2, _ref3, isMounted) {\n    let {\n      transition,\n      transitionEnd,\n      ...target\n    } = _ref2;\n    let {\n      transformValues\n    } = _ref3;\n    let origin = getOrigin(target, transition || {}, this);\n    /**\n     * If Framer has provided a function to convert `Color` etc value types, convert them\n     */\n    if (transformValues) {\n      if (transitionEnd) transitionEnd = transformValues(transitionEnd);\n      if (target) target = transformValues(target);\n      if (origin) origin = transformValues(origin);\n    }\n    if (isMounted) {\n      checkTargetForNewValues(this, target, origin);\n      const parsed = parseDomVariant(this, target, origin, transitionEnd);\n      transitionEnd = parsed.transitionEnd;\n      target = parsed.target;\n    }\n    return {\n      transition,\n      transitionEnd,\n      ...target\n    };\n  }\n}\nexport { DOMVisualElement };","map":{"version":3,"names":["getOrigin","checkTargetForNewValues","parseDomVariant","VisualElement","DOMVisualElement","sortInstanceNodePosition","a","b","compareDocumentPosition","getBaseTargetFromProps","props","key","_a","style","removeValueFromRenderState","vars","makeTargetAnimatableFromInstance","isMounted","transition","transitionEnd","target","transformValues","origin","parsed"],"sources":["C:/Users/Utilisateur/Desktop/front/node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs"],"sourcesContent":["import { getOrigin, checkTargetForNewValues } from '../utils/setters.mjs';\nimport { parseDomVariant } from './utils/parse-dom-variant.mjs';\nimport { VisualElement } from '../VisualElement.mjs';\n\nclass DOMVisualElement extends VisualElement {\n    sortInstanceNodePosition(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    }\n    getBaseTargetFromProps(props, key) {\n        var _a;\n        return (_a = props.style) === null || _a === void 0 ? void 0 : _a[key];\n    }\n    removeValueFromRenderState(key, { vars, style }) {\n        delete vars[key];\n        delete style[key];\n    }\n    makeTargetAnimatableFromInstance({ transition, transitionEnd, ...target }, { transformValues }, isMounted) {\n        let origin = getOrigin(target, transition || {}, this);\n        /**\n         * If Framer has provided a function to convert `Color` etc value types, convert them\n         */\n        if (transformValues) {\n            if (transitionEnd)\n                transitionEnd = transformValues(transitionEnd);\n            if (target)\n                target = transformValues(target);\n            if (origin)\n                origin = transformValues(origin);\n        }\n        if (isMounted) {\n            checkTargetForNewValues(this, target, origin);\n            const parsed = parseDomVariant(this, target, origin, transitionEnd);\n            transitionEnd = parsed.transitionEnd;\n            target = parsed.target;\n        }\n        return {\n            transition,\n            transitionEnd,\n            ...target,\n        };\n    }\n}\n\nexport { DOMVisualElement };\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,uBAAuB,QAAQ,sBAAsB;AACzE,SAASC,eAAe,QAAQ,+BAA+B;AAC/D,SAASC,aAAa,QAAQ,sBAAsB;AAEpD,MAAMC,gBAAgB,SAASD,aAAa,CAAC;EACzCE,wBAAwB,CAACC,CAAC,EAAEC,CAAC,EAAE;IAC3B;AACR;AACA;AACA;AACA;IACQ,OAAOD,CAAC,CAACE,uBAAuB,CAACD,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EACpD;EACAE,sBAAsB,CAACC,KAAK,EAAEC,GAAG,EAAE;IAC/B,IAAIC,EAAE;IACN,OAAO,CAACA,EAAE,GAAGF,KAAK,CAACG,KAAK,MAAM,IAAI,IAAID,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACD,GAAG,CAAC;EAC1E;EACAG,0BAA0B,CAACH,GAAG,QAAmB;IAAA,IAAjB;MAAEI,IAAI;MAAEF;IAAM,CAAC;IAC3C,OAAOE,IAAI,CAACJ,GAAG,CAAC;IAChB,OAAOE,KAAK,CAACF,GAAG,CAAC;EACrB;EACAK,gCAAgC,eAAgEC,SAAS,EAAE;IAAA,IAA1E;MAAEC,UAAU;MAAEC,aAAa;MAAE,GAAGC;IAAO,CAAC;IAAA,IAAE;MAAEC;IAAgB,CAAC;IAC1F,IAAIC,MAAM,GAAGtB,SAAS,CAACoB,MAAM,EAAEF,UAAU,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC;IACtD;AACR;AACA;IACQ,IAAIG,eAAe,EAAE;MACjB,IAAIF,aAAa,EACbA,aAAa,GAAGE,eAAe,CAACF,aAAa,CAAC;MAClD,IAAIC,MAAM,EACNA,MAAM,GAAGC,eAAe,CAACD,MAAM,CAAC;MACpC,IAAIE,MAAM,EACNA,MAAM,GAAGD,eAAe,CAACC,MAAM,CAAC;IACxC;IACA,IAAIL,SAAS,EAAE;MACXhB,uBAAuB,CAAC,IAAI,EAAEmB,MAAM,EAAEE,MAAM,CAAC;MAC7C,MAAMC,MAAM,GAAGrB,eAAe,CAAC,IAAI,EAAEkB,MAAM,EAAEE,MAAM,EAAEH,aAAa,CAAC;MACnEA,aAAa,GAAGI,MAAM,CAACJ,aAAa;MACpCC,MAAM,GAAGG,MAAM,CAACH,MAAM;IAC1B;IACA,OAAO;MACHF,UAAU;MACVC,aAAa;MACb,GAAGC;IACP,CAAC;EACL;AACJ;AAEA,SAAShB,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}