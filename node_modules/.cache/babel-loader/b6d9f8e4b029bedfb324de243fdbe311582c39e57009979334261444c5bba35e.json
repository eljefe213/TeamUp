{"ast":null,"code":"import { easeInOut } from '../../easing/ease.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\nimport { isEasingArray, easingDefinitionToFunction } from '../utils/easing.mjs';\nfunction defaultEasing(values, easing) {\n  return values.map(() => easing || easeInOut).splice(0, values.length - 1);\n}\nfunction defaultOffset(values) {\n  const numValues = values.length;\n  return values.map((_value, i) => i !== 0 ? i / (numValues - 1) : 0);\n}\nfunction convertOffsetToTimes(offset, duration) {\n  return offset.map(o => o * duration);\n}\nfunction keyframes(_ref) {\n  let {\n    keyframes: keyframeValues,\n    ease = easeInOut,\n    times,\n    duration = 300\n  } = _ref;\n  keyframeValues = [...keyframeValues];\n  /**\n   * Easing functions can be externally defined as strings. Here we convert them\n   * into actual functions.\n   */\n  const easingFunctions = isEasingArray(ease) ? ease.map(easingDefinitionToFunction) : easingDefinitionToFunction(ease);\n  /**\n   * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n   * to reduce GC during animation.\n   */\n  const state = {\n    done: false,\n    value: keyframeValues[0]\n  };\n  /**\n   * Create a times array based on the provided 0-1 offsets\n   */\n  const absoluteTimes = convertOffsetToTimes(\n  // Only use the provided offsets if they're the correct length\n  // TODO Maybe we should warn here if there's a length mismatch\n  times && times.length === keyframeValues.length ? times : defaultOffset(keyframeValues), duration);\n  function createInterpolator() {\n    return interpolate(absoluteTimes, keyframeValues, {\n      ease: Array.isArray(easingFunctions) ? easingFunctions : defaultEasing(keyframeValues, easingFunctions)\n    });\n  }\n  let interpolator = createInterpolator();\n  return {\n    next: t => {\n      state.value = interpolator(t);\n      state.done = t >= duration;\n      return state;\n    },\n    flipTarget: () => {\n      keyframeValues.reverse();\n      interpolator = createInterpolator();\n    }\n  };\n}\nexport { convertOffsetToTimes, defaultEasing, defaultOffset, keyframes };","map":{"version":3,"names":["easeInOut","interpolate","isEasingArray","easingDefinitionToFunction","defaultEasing","values","easing","map","splice","length","defaultOffset","numValues","_value","i","convertOffsetToTimes","offset","duration","o","keyframes","keyframeValues","ease","times","easingFunctions","state","done","value","absoluteTimes","createInterpolator","Array","isArray","interpolator","next","t","flipTarget","reverse"],"sources":["C:/Users/Utilisateur/Desktop/front/node_modules/framer-motion/dist/es/animation/legacy-popmotion/keyframes.mjs"],"sourcesContent":["import { easeInOut } from '../../easing/ease.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\nimport { isEasingArray, easingDefinitionToFunction } from '../utils/easing.mjs';\n\nfunction defaultEasing(values, easing) {\n    return values.map(() => easing || easeInOut).splice(0, values.length - 1);\n}\nfunction defaultOffset(values) {\n    const numValues = values.length;\n    return values.map((_value, i) => i !== 0 ? i / (numValues - 1) : 0);\n}\nfunction convertOffsetToTimes(offset, duration) {\n    return offset.map((o) => o * duration);\n}\nfunction keyframes({ keyframes: keyframeValues, ease = easeInOut, times, duration = 300, }) {\n    keyframeValues = [...keyframeValues];\n    /**\n     * Easing functions can be externally defined as strings. Here we convert them\n     * into actual functions.\n     */\n    const easingFunctions = isEasingArray(ease)\n        ? ease.map(easingDefinitionToFunction)\n        : easingDefinitionToFunction(ease);\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = {\n        done: false,\n        value: keyframeValues[0],\n    };\n    /**\n     * Create a times array based on the provided 0-1 offsets\n     */\n    const absoluteTimes = convertOffsetToTimes(\n    // Only use the provided offsets if they're the correct length\n    // TODO Maybe we should warn here if there's a length mismatch\n    times && times.length === keyframeValues.length\n        ? times\n        : defaultOffset(keyframeValues), duration);\n    function createInterpolator() {\n        return interpolate(absoluteTimes, keyframeValues, {\n            ease: Array.isArray(easingFunctions)\n                ? easingFunctions\n                : defaultEasing(keyframeValues, easingFunctions),\n        });\n    }\n    let interpolator = createInterpolator();\n    return {\n        next: (t) => {\n            state.value = interpolator(t);\n            state.done = t >= duration;\n            return state;\n        },\n        flipTarget: () => {\n            keyframeValues.reverse();\n            interpolator = createInterpolator();\n        },\n    };\n}\n\nexport { convertOffsetToTimes, defaultEasing, defaultOffset, keyframes };\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,uBAAuB;AACjD,SAASC,WAAW,QAAQ,6BAA6B;AACzD,SAASC,aAAa,EAAEC,0BAA0B,QAAQ,qBAAqB;AAE/E,SAASC,aAAa,CAACC,MAAM,EAAEC,MAAM,EAAE;EACnC,OAAOD,MAAM,CAACE,GAAG,CAAC,MAAMD,MAAM,IAAIN,SAAS,CAAC,CAACQ,MAAM,CAAC,CAAC,EAAEH,MAAM,CAACI,MAAM,GAAG,CAAC,CAAC;AAC7E;AACA,SAASC,aAAa,CAACL,MAAM,EAAE;EAC3B,MAAMM,SAAS,GAAGN,MAAM,CAACI,MAAM;EAC/B,OAAOJ,MAAM,CAACE,GAAG,CAAC,CAACK,MAAM,EAAEC,CAAC,KAAKA,CAAC,KAAK,CAAC,GAAGA,CAAC,IAAIF,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;AACvE;AACA,SAASG,oBAAoB,CAACC,MAAM,EAAEC,QAAQ,EAAE;EAC5C,OAAOD,MAAM,CAACR,GAAG,CAAEU,CAAC,IAAKA,CAAC,GAAGD,QAAQ,CAAC;AAC1C;AACA,SAASE,SAAS,OAA0E;EAAA,IAAzE;IAAEA,SAAS,EAAEC,cAAc;IAAEC,IAAI,GAAGpB,SAAS;IAAEqB,KAAK;IAAEL,QAAQ,GAAG;EAAK,CAAC;EACtFG,cAAc,GAAG,CAAC,GAAGA,cAAc,CAAC;EACpC;AACJ;AACA;AACA;EACI,MAAMG,eAAe,GAAGpB,aAAa,CAACkB,IAAI,CAAC,GACrCA,IAAI,CAACb,GAAG,CAACJ,0BAA0B,CAAC,GACpCA,0BAA0B,CAACiB,IAAI,CAAC;EACtC;AACJ;AACA;AACA;EACI,MAAMG,KAAK,GAAG;IACVC,IAAI,EAAE,KAAK;IACXC,KAAK,EAAEN,cAAc,CAAC,CAAC;EAC3B,CAAC;EACD;AACJ;AACA;EACI,MAAMO,aAAa,GAAGZ,oBAAoB;EAC1C;EACA;EACAO,KAAK,IAAIA,KAAK,CAACZ,MAAM,KAAKU,cAAc,CAACV,MAAM,GACzCY,KAAK,GACLX,aAAa,CAACS,cAAc,CAAC,EAAEH,QAAQ,CAAC;EAC9C,SAASW,kBAAkB,GAAG;IAC1B,OAAO1B,WAAW,CAACyB,aAAa,EAAEP,cAAc,EAAE;MAC9CC,IAAI,EAAEQ,KAAK,CAACC,OAAO,CAACP,eAAe,CAAC,GAC9BA,eAAe,GACflB,aAAa,CAACe,cAAc,EAAEG,eAAe;IACvD,CAAC,CAAC;EACN;EACA,IAAIQ,YAAY,GAAGH,kBAAkB,EAAE;EACvC,OAAO;IACHI,IAAI,EAAGC,CAAC,IAAK;MACTT,KAAK,CAACE,KAAK,GAAGK,YAAY,CAACE,CAAC,CAAC;MAC7BT,KAAK,CAACC,IAAI,GAAGQ,CAAC,IAAIhB,QAAQ;MAC1B,OAAOO,KAAK;IAChB,CAAC;IACDU,UAAU,EAAE,MAAM;MACdd,cAAc,CAACe,OAAO,EAAE;MACxBJ,YAAY,GAAGH,kBAAkB,EAAE;IACvC;EACJ,CAAC;AACL;AAEA,SAASb,oBAAoB,EAAEV,aAAa,EAAEM,aAAa,EAAEQ,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}